{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A collection of Terraform modules for provisioning resources in the cloud.</p>"},{"location":"aws/github_action_oidc/","title":"GitHub Action OIDC","text":"<p>This module configures an OpenID Connect (OIDC) provider for GitHub Actions on AWS. It enables GitHub Actions to authenticate with AWS using OIDC tokens, enhancing security by removing the need for long-lived AWS credentials.</p>"},{"location":"aws/github_action_oidc/#benefits-of-using-oidc-with-github-actions","title":"Benefits of Using OIDC with GitHub Actions","text":"<p>Implementing OIDC with GitHub Actions offers a secure method for authenticating workflows with AWS. It minimizes the risk of credential exposure and simplifies secret management. For additional details, refer to the following resources:</p> <ul> <li>Configuring OpenID Connect in Amazon Web Services</li> <li>GitHub Actions: Update on OIDC integration with AWS</li> </ul>"},{"location":"aws/github_action_oidc/#example-github-action-workflow","title":"Example Github Action Workflow","text":"<pre><code>name: Example OIDC Workflow\n\non:\n  pull_request:\n    branches:\n      - main\n\npermissions:\n  id-token: write  # Required for requesting the Json Web Token (JWT)\n  contents: read   # Required for actions/checkout\n\njobs:\n  example-job:\n    name: Example Job\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        id: checkout-repo\n        uses: actions/checkout@v4\n\n      - name: Configure AWS credentials from OIDC\n        id: configure-aws-credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          audience: sts.amazonaws.com\n          aws-region: ${{ secrets.AWS_REGION }}  # Set the AWS region as a repository secret\n          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}  # Set the role ARN as a repository secret\n          role-session-name: example-session\n\n      - name: Add profile credentials to ~/.aws/credentials\n        id: add-profile-credentials\n        run: |\n          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile example_profile\n          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile example_profile\n          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile example_profile\n</code></pre>"},{"location":"aws/optuna_sagemaker/","title":"Optuna with SageMaker","text":"<p>Sets up an environment for running hyperparameter optimization (HPO) with Optuna on Amazon SageMaker. The configuration files and scripts are adapted from an AWS blog post and its associated GitHub repository. Additionally, it incorporates lifecycle scripts for setting up <code>code-server</code> on SageMaker, directly taken from the AWS Code-Server solution developed by solutions engineers at AWS.</p>"},{"location":"aws/optuna_sagemaker/#overview","title":"Overview","text":"<pre><code>\u251c\u2500\u2500 backend.hcl-example            # Example configuration for Terraform backend\n\u251c\u2500\u2500 ecr.tf                         # Creates an Elastic Container Registry for Docker images used for training, preprocessing, or serving\n\u251c\u2500\u2500 iam.tf                         # IAM roles and policies for SageMaker and related services\n\u251c\u2500\u2500 lifecycle_scripts              # Lifecycle scripts for installing and configuring code-server\n\u2502   \u251c\u2500\u2500 install_codeserver.sh      # Script to install code-server\n\u2502   \u2514\u2500\u2500 setup_codeserver.sh        # Script to configure code-server during startup\n\u251c\u2500\u2500 main.tf                        # Main Terraform configuration file\n\u251c\u2500\u2500 outputs.tf                     # Outputs for the Terraform module\n\u251c\u2500\u2500 rds.tf                         # RDS configuration for databases\n\u251c\u2500\u2500 s3.tf                          # S3 bucket configuration for storage\n\u251c\u2500\u2500 sagemaker.tf                   # SageMaker configurations for running HPO\n\u251c\u2500\u2500 secrets_manager.tf             # Secrets Manager for handling sensitive information\n\u251c\u2500\u2500 security_groups.tf             # Security groups for network access\n\u251c\u2500\u2500 variables.tf                   # Variable definitions\n\u251c\u2500\u2500 variables.tfvars-example       # Example of variable values\n\u2514\u2500\u2500 vpc.tf                         # VPC configuration\n</code></pre>"},{"location":"aws/optuna_sagemaker/#lifecycle-script-descriptions","title":"Lifecycle Script Descriptions","text":"<ul> <li> <p><code>install_codeserver.sh</code></p> <ul> <li>Installs <code>code-server</code> during the creation of a new SageMaker Notebook Instance.</li> <li>Executes only once during the initial setup.</li> </ul> </li> <li> <p><code>setup_codeserver.sh</code></p> <ul> <li>Configures <code>code-server</code> every time the notebook instance starts, including the initial setup and subsequent restarts.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#roles-of-tf-files","title":"Roles of <code>.tf</code> Files","text":"<ol> <li>Core Network (<code>vpc.tf</code>):<ul> <li>Serves as the backbone for all other resources (SageMaker, RDS, etc.).</li> </ul> </li> <li>Security (<code>security_groups.tf</code>):<ul> <li>Ensures proper access control between SageMaker, RDS, and external services.</li> </ul> </li> <li>Sensitive Data (<code>secrets_manager.tf</code>):<ul> <li>Secures credentials and secrets required by SageMaker and RDS.</li> </ul> </li> <li>IAM (<code>iam.tf</code>):<ul> <li>Permission sets for SageMaker to interact with S3, ECR, and Secrets Manager.</li> </ul> </li> <li>RDS (<code>rds.tf</code>):<ul> <li>Provides a database for storing HPO results, accessible from the SageMaker notebook.</li> </ul> </li> <li>SageMaker (<code>sagemaker.tf</code>):<ul> <li>Hosts the core notebook instance for running Optuna and managing HPO tasks.</li> </ul> </li> <li>Storage (<code>s3.tf</code>, <code>ecr.tf</code>):<ul> <li>Stores datasets, model artifacts, and container images required by training, preprocessing, and serving tasks.</li> </ul> </li> </ol>"},{"location":"aws/optuna_sagemaker/#1-vpctf","title":"1. <code>vpc.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>VPC: Defines a Virtual Private Cloud (VPC) for network isolation.</li> <li>Subnets: Creates public and private subnets for resource placement.</li> <li>Internet Gateway: Enables internet access for public subnets.</li> <li>NAT Gateways: Provides internet access for private subnets.</li> <li>Route Tables: Manages routing within the VPC for public and private subnets.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Other resources, such as RDS and SageMaker, rely on the VPC and its subnets for network configuration.</li> <li>Security groups (from <code>security_groups.tf</code>) are tied to this VPC.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#2-security_groupstf","title":"2. <code>security_groups.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>SageMaker Security Group: Allows outbound internet access for SageMaker notebook instances.</li> <li>RDS Security Group: Allows inbound traffic to RDS from sageMaker only.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>The SageMaker security group is used by resources in <code>sagemaker.tf</code>.</li> <li>The RDS security group is associated with RDS resources in <code>rds.tf</code> and uses rules that reference the SageMaker security group.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#3-secrets_managertf","title":"3. <code>secrets_manager.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>Secrets: Manages sensitive data such as:<ul> <li>GitHub Personal Access Token for SageMaker's code repository.</li> <li>RDS credentials for database access.</li> </ul> </li> <li>Random String/Password: Generates unique identifiers and secure passwords.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Secrets are referenced by the SageMaker code repository (<code>sagemaker.tf</code>) and RDS cluster (<code>rds.tf</code>).</li> <li>RDS uses the credentials stored in Secrets Manager for secure access.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#4-sagemakertf","title":"4. <code>sagemaker.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>Lifecycle Configuration: Manages custom scripts for installing and configuring <code>code-server</code>.</li> <li>Code Repository: Links SageMaker to a private GitHub repository using credentials from Secrets Manager.</li> <li>Notebook Instance: Provisions the SageMaker notebook for experimentation and HPO tasks.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Depends on IAM roles (<code>iam.tf</code>), subnets (<code>vpc.tf</code>), security groups (<code>security_groups.tf</code>), and Secrets Manager secrets (<code>secrets_manager.tf</code>).</li> <li>Relies on lifecycle scripts for custom configuration.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#5-s3tf","title":"5. <code>s3.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>S3 Bucket: Provides storage for training artifacts and datasets.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>SageMaker (<code>sagemaker.tf</code>) and other components can use this bucket for storing intermediate and final outputs.</li> <li>The IAM role (<code>iam.tf</code>) grants permissions to the sagemaker role for accessing this bucket.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#6-rdstf","title":"6. <code>rds.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>Subnet Group: Defines subnets where RDS instances are deployed.</li> <li>Parameter Groups: Configures database engine settings.</li> <li>RDS Cluster: Creates a database cluster for storing HPO results.</li> <li>RDS Instances: Adds instances to the database cluster for handling workloads.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Depends on private subnets from <code>vpc.tf</code> for deployment.</li> <li>Uses Secrets Manager credentials (<code>secrets_manager.tf</code>) for database access.</li> <li>The security group (<code>security_groups.tf</code>) controls access between SageMaker and RDS.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#7-outputstf","title":"7. <code>outputs.tf</code>","text":"<ul> <li> <p>Purpose:</p> <ul> <li>Exposes key details about the infrastructure, such as:<ul> <li>VPC and subnet IDs for networking.</li> <li>Security group IDs for access control.</li> <li>RDS connection details (endpoint, credentials, database name) for use in training jobs.</li> </ul> </li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Outputs are consumed by downstream processes, such as training jobs or other modules that require connection details.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#8-iamtf","title":"8. <code>iam.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>IAM Role for SageMaker: Grants necessary permissions to SageMaker for accessing S3, ECR, and Secrets Manager.</li> <li>Policies: Access control can be fine-tuned using policies.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>SageMaker relies on this role to access resources defined in <code>s3.tf</code>, <code>secrets_manager.tf</code>, and <code>ecr.tf</code>.</li> </ul> </li> </ul>"},{"location":"aws/optuna_sagemaker/#9-ecrtf","title":"9. <code>ecr.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>ECR Repository: Stores Docker images for custom SageMaker training jobs.</li> <li>Lifecycle Policy: Manages cleanup of old or untagged images to optimize storage.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>SageMaker uses the ECR repository for custom container images in training jobs.</li> <li>The IAM role (<code>iam.tf</code>) grants access to this repository.</li> </ul> </li> </ul>"},{"location":"aws/s3_remote_state/","title":"S3 Remote State","text":"<p>This module is based the following Stack Overflow answer and sets up an S3 bucket and a DynamoDB table for managing Terraform remote state storage and locking.</p> <p>In collaborative projects, storing the Terraform state file locally can lead to conflicts, inconsistencies, and even data loss. A remote backend, such as an S3 bucket, provides a centralized location for the state file.</p> <p>While this module does not fully resolve the \"chicken-and-egg\" problem of initial state management\u2014 since a local state file is still used for this initial setup\u2014 it provides a simple and effective way to create an S3 bucket for storing state files for all subsequent resources. This approach minimizes project complexity while enabling the use of remote state management.</p> <ol> <li> <p>S3 Remote State Backend</p> <ul> <li>Stores the Terraform state securely in an S3 bucket.</li> <li>Enables versioning to track state file changes over time.</li> <li>Includes a <code>prevent_destroy</code> lifecycle rule to avoid accidental deletion.</li> </ul> </li> <li> <p>DynamoDB State Locking</p> <ul> <li>Prevents concurrent state updates with a DynamoDB table for locking.</li> <li>Supports both <code>PAY_PER_REQUEST</code> and <code>PROVISIONED</code> billing modes, which can be controlled using the <code>dynamodb_table_billing_mode</code> variable.</li> </ul> </li> </ol>"},{"location":"aws/sagemaker/","title":"SageMaker","text":"<p>This setup can be used for running a SageMaker notebook instance with a simple network infrastructure, minimal IAM and security configurations, and lifecycle scripts for setting up <code>code-server</code>. The configuration files provide the essential components needed to deploy a VPC, S3 storage, and security for SageMaker.</p> <p>For a setup that integrates <code>optuna</code> for hyperparameter optimization, refer to the Optuna SageMaker documentation.</p> <pre><code>\u251c\u2500\u2500 backend.hcl-example            # Example configuration for Terraform backend\n\u251c\u2500\u2500 ecr.tf                         # Elastic Container Registry for custom Docker images\n\u251c\u2500\u2500 iam.tf                         # IAM roles and policies for SageMaker\n\u251c\u2500\u2500 lifecycle_scripts              # Lifecycle scripts for installing and configuring code-server\n\u2502   \u251c\u2500\u2500 install_codeserver.sh      # Script to install code-server\n\u2502   \u2514\u2500\u2500 setup_codeserver.sh        # Script to configure code-server during startup\n\u251c\u2500\u2500 main.tf                        # Main Terraform configuration file\n\u251c\u2500\u2500 s3.tf                          # S3 bucket configuration\n\u251c\u2500\u2500 sagemaker.tf                   # SageMaker configurations\n\u251c\u2500\u2500 secrets_manager.tf             # Secrets Manager for sensitive information\n\u251c\u2500\u2500 security_groups.tf             # Security groups for SageMaker\n\u251c\u2500\u2500 variables.tf                   # Variable definitions\n\u251c\u2500\u2500 variables.tfvars-example       # Example variable values\n\u2514\u2500\u2500 vpc.tf                         # VPC configuration\n</code></pre>"},{"location":"aws/sagemaker/#lifecycle-script-descriptions","title":"Lifecycle Script Descriptions","text":"<ul> <li> <p><code>install_codeserver.sh</code></p> <ul> <li>Installs <code>code-server</code> during the creation of a new SageMaker Notebook Instance.</li> <li>Executes only once during the initial setup.</li> </ul> </li> <li> <p><code>setup_codeserver.sh</code></p> <ul> <li>Configures <code>code-server</code> every time the notebook instance starts, including the initial setup and subsequent restarts.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#roles-of-tf-files","title":"Roles of <code>.tf</code> Files","text":""},{"location":"aws/sagemaker/#1-vpctf","title":"1. <code>vpc.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>VPC: Defines a Virtual Private Cloud (VPC) for network isolation.</li> <li>Public Subnets: Creates two public subnets for resource placement.</li> <li>Internet Gateway: Enables internet access for public subnets.</li> <li>Route Tables: Manages routing for public subnets with internet access.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Provides networking for SageMaker and other resources.</li> <li>Security groups (from <code>security_groups.tf</code>) are tied to this VPC.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#2-security_groupstf","title":"2. <code>security_groups.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>SageMaker Security Group: Allows outbound internet access for SageMaker notebook instances.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Used by resources in <code>sagemaker.tf</code> for network access control.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#3-secrets_managertf","title":"3. <code>secrets_manager.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>Secrets: Manages sensitive data such as:<ul> <li>GitHub Personal Access Token for SageMaker's code repository.</li> </ul> </li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Secrets are referenced by the SageMaker code repository (<code>sagemaker.tf</code>).</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#4-sagemakertf","title":"4. <code>sagemaker.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>Lifecycle Configuration: Manages custom scripts for installing and configuring <code>code-server</code>.</li> <li>Code Repository: Links SageMaker to a private GitHub repository using credentials from Secrets Manager.</li> <li>Notebook Instance: Provisions the SageMaker notebook for experimentation and development tasks.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>Depends on IAM roles (<code>iam.tf</code>), public subnets (<code>vpc.tf</code>), security groups (<code>security_groups.tf</code>), and Secrets Manager secrets (<code>secrets_manager.tf</code>).</li> <li>Relies on lifecycle scripts for custom configuration.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#5-s3tf","title":"5. <code>s3.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>S3 Bucket: Provides storage for datasets, artifacts, and outputs.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>The IAM role (<code>iam.tf</code>) grants permissions to SageMaker for accessing this bucket.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#6-iamtf","title":"6. <code>iam.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>IAM Role for SageMaker: Grants necessary permissions to SageMaker for accessing S3 and Secrets Manager.</li> <li>Policies: Fine-tuned access control for SageMaker.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>SageMaker relies on this role to interact with S3 and Secrets Manager.</li> </ul> </li> </ul>"},{"location":"aws/sagemaker/#7-ecrtf","title":"7. <code>ecr.tf</code>","text":"<ul> <li> <p>Provisioned Resources:</p> <ul> <li>ECR Repository: Stores Docker images for custom SageMaker training jobs.</li> <li>Lifecycle Policy: Manages cleanup of old or untagged images to optimize storage.</li> </ul> </li> <li> <p>Dependencies:</p> <ul> <li>SageMaker uses the ECR repository for custom container images in training jobs.</li> <li>The IAM role (<code>iam.tf</code>) grants access to this repository.</li> </ul> </li> </ul>"}]}